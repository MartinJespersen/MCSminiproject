class DutyRosterController is subclass of Global

instance variables
private dutyRoster: map Timeslot to Shift := {|->};
private employees: set of Employee := {};
private notificationManager: NotificationManager;
private time: Time;
private payment : Payment;
private shiftToEmployees: map Shift to set of Employee := {|->};
private employeeToShifts: map Employee to set of Shift := {|->};

inv dom(shiftToEmployees) subset rng(dutyRoster) and 
    dom(employeeToShifts) subset employees and
    dunion rng(shiftToEmployees) = dom(employeeToShifts) and
    dunion rng(employeeToShifts) = dom(shiftToEmployees);

operations

public DutyRosterController : NotificationManager * Payment ==> DutyRosterController
DutyRosterController(notifyMan, p) ==
(
    notificationManager := notifyMan;
    time := notificationManager.GetTime();
    payment := p;

);

public AddEmployeeToShift : Employee * Shift ==> ()
AddEmployeeToShift(employee, shift) ==
(
    dcl shiftToEmployeesTemp : set of Employee := {};
    dcl employeeToShiftsTemp : set of Shift := {};
    if shift in set dom(shiftToEmployees)
    then 
        shiftToEmployeesTemp := shiftToEmployees(shift) union {employee}
    else
        shiftToEmployeesTemp := {employee};
    if(employee in set dom(employeeToShifts)) 
    then 
        employeeToShiftsTemp := employeeToShifts(employee) union {shift}
    else
        employeeToShiftsTemp := {shift};
    atomic(
        shiftToEmployees := 
            shiftToEmployees ++ {shift |-> shiftToEmployeesTemp};
        employeeToShifts := 
            employeeToShifts ++ {employee |-> employeeToShiftsTemp}
    );
    shift.AddEmployeeToShift(employee);
)
pre IsEmployeePartOfDutyRoster(employee, employees) and 
    IsShiftPartOfDutyRoster(shift, rng(dutyRoster)) and
    not IsEmployeePartOfShift(employee, shiftToEmployees, shift) and 
    (shift not in set dom(shiftToEmployees) or 
    forall emp in set shiftToEmployees(shift) & employee.GetId() <> emp.GetId())
post employee in set shiftToEmployees(shift) and 
    shift in set employeeToShifts(employee);

public AddShiftToDutyRoster : Timeslot * Shift ==> ()
AddShiftToDutyRoster(timeslot,shift) == 
(
    dutyRoster := dutyRoster munion {timeslot |-> shift};
)
pre not IsShiftPartOfDutyRoster(shift, rng(dutyRoster)) and
    IsTimeslotPossible(timeslot, dom(dutyRoster));

public DeleteShiftFromDutyRoster: Shift ==> ()
DeleteShiftFromDutyRoster(shift) ==
(
    dcl employeeToShiftsTemp: map Employee to set of Shift := { |->};
    for all emp in set dom(employeeToShifts) do
        employeeToShiftsTemp := employeeToShiftsTemp munion {emp |-> employeeToShifts(emp) \ {shift}};
    atomic(
        dutyRoster := dutyRoster :-> {shift};
        shiftToEmployees := {shift} <-: shiftToEmployees;
        employeeToShifts := employeeToShiftsTemp;
    );
    notificationManager.DeleteNotificationsForShift(shift);

) 
pre IsShiftPartOfDutyRoster(shift, rng(dutyRoster));

public AddEmployeeToDutyRoster : Employee ==> ()
AddEmployeeToDutyRoster(emp) ==
    employees := employees union {emp}
pre not IsEmployeePartOfDutyRoster(emp, employees);

public DeleteEmployeeFromDutyRoster: Employee ==> ()
DeleteEmployeeFromDutyRoster(emp) == 
(
    dcl shiftToEmployeesTemp: map Shift to set of Employee := {|->};
    shiftToEmployeesTemp := {s |-> shiftToEmployees(s) \ {emp} | s in set dom(shiftToEmployees) & 
        shiftToEmployees(s) \ {emp} <> {}};
    atomic(
        employees := employees \ {emp};
        employeeToShifts := {emp} <-: employeeToShifts;
        shiftToEmployees := shiftToEmployeesTemp;
    );
    notificationManager.DeleteNotificationsForEmployee(emp);
)
pre IsEmployeePartOfDutyRoster(emp, employees);

public GetAvailableTimeslotsMatchingExpertise : Employee ==> set of Timeslot
GetAvailableTimeslotsMatchingExpertise(emp) ==
    let prof = emp.GetProfession()
    in
        return {t | t in set dom(dutyRoster) & 
            let shift = dutyRoster(t),
                mk_(startTime,-) = t 
                in
                    shift.IsShiftVacant(prof) and 
                    startTime >= time.GetTime() and 
                    (shift not in set dom(shiftToEmployees) or emp not in set shiftToEmployees(shift))}
post RESULT subset dom(dutyRoster);

public GetAssignedTimeslots : Employee ==> set of Timeslot
GetAssignedTimeslots(emp) ==
    return {t | t in set dom dutyRoster & dutyRoster(t) in set employeeToShifts(emp)}
pre IsEmployeePartOfDutyRoster(emp, employees)
post RESULT subset dom dutyRoster;

public CreateNotification : Shift * Employee * nat ==> ()
CreateNotification(shift, emp, notificationTime) ==
    let mk_(startTime, endTime) = (inverse dutyRoster)(shift) in
        notificationManager.AddNotification(shift, emp, mk_(startTime, endTime), startTime - notificationTime)
pre IsShiftPartOfDutyRoster(shift, rng(dutyRoster)) and
    IsEmployeePartOfDutyRoster(emp, employees) and 
    IsEmployeePartOfShift(emp, shiftToEmployees, shift) and
    IsShiftInTheFuture(shift);

public DeleteNotifications : Shift * Employee ==> ()
DeleteNotifications(shift, emp) ==
    notificationManager.DeleteNotification(shift, emp, (inverse dutyRoster)(shift))
pre IsEmployeePartOfShift(emp, shiftToEmployees, shift);

pure private IsShiftInTheFuture : Shift ==> bool
IsShiftInTheFuture(shift) ==
    let mk_(startTime, -) = (inverse dutyRoster)(shift) in
        return startTime > time.GetTime();

public PaymentOverPeriod: Employee * nat * nat ==> nat
PaymentOverPeriod(emp, from, until) ==
    let timeslots = {t | t in set dom(dutyRoster) & dutyRoster(t) in set employeeToShifts(emp)} 
    in
        payment.PaymentOverPeriod(emp, timeslots, from, until)
pre from < until and 
    IsEmployeePartOfDutyRoster(emp, employees);

functions

private IsEmployeePartOfShift: Employee * map Shift to set of Employee * Shift-> bool
IsEmployeePartOfShift(emp, shiftToEmployees,  shift) ==
    shift in set dom(shiftToEmployees) and
    emp in set shiftToEmployees(shift);

private IsEmployeePartOfDutyRoster : Employee * set of Employee -> bool
IsEmployeePartOfDutyRoster(emp, allEmp) == 
    emp.GetId() in set {empIter.GetId() | empIter in set allEmp};
    
public IsShiftPartOfDutyRoster : Shift * set of Shift -> bool
IsShiftPartOfDutyRoster(shift, allShifts) == 
    shift.GetId() in set {shiftIter.GetId() | shiftIter in set allShifts};

public IsTimeslotPossible : Timeslot * set of Timeslot -> bool
IsTimeslotPossible(timeslot, allTimeslots) == 
    let mk_(startTime, endTime) = timeslot in
        forall slot in set allTimeslots & 
            let mk_(setStartTime, setEndTime) = slot in
                endTime <= setStartTime or startTime >= setEndTime;



end DutyRosterController